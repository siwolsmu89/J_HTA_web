EL(Expression Language)
	- 표현 언어다.
	- JSP 2.0부터 jsp에 포함된 기술이다.
	- EL은 값을 표현할 때 사용되는 스크립트 언어다.
	- 기능
		- 요청파라미터값, 초기화파라미터값의 표현
		- PageContext, 요청객체, 세션객체, 애플리케이션객체의 속성값 표현
		- 요청헤더정보, 쿠키값의 표현
		- 사칙연산, 비교연산, 논리연산자 기능 제공
		- 메소드 호출 기능 제공

	- 형식
		${EL표현식}
		사용예)
			<p>${표현식}</p>
			<img src="resources/images/${표현식}" />
			<input type="text" name="username" value="${표현식}" />
			<a href="list.hta?pageNo=${표현식}&cateNo=${표현식}">링크</a>
			<div id="box-${표현식}"> ... </div>

	- EL  표현식
		* 파라미터 값 표현하기
			${param.요청파라미터이름}		----> 문자열이 획득되고, 표현된다.
			${initParam.초기화파라미터이름}	----> 문자열이 획득되고, 표현된다.
		
		* 속성값 표현하기
	
		${속성명}	| 값 표현하기
		-----------------------------------------------------------------------------------
		기본자료형	| ${속성명}
		문자열		|
		-----------------------------------------------------------------------------------
		객체		| ${속성명.필드명}
		-----------------------------------------------------------------------------------
		배열, 리스트	| ${속성명[인덱스]}
		-----------------------------------------------------------------------------------
		맵		| ${속성명.키}
		-----------------------------------------------------------------------------------

	- 연산자
		사칙연산
			덧셈: + 			${표현식 + 표현식}
			뺄셈: - 			${표현식 - 표현식}
			곱셈: * 			${표현식 * 표현식}
			나눗셈: / div 			${표현식 / 표현식}	${표현식 div 표현식}
			나머지연산: % mod		${표현식 % 표현식}	${표현식 mod 표현식}
		비교연산
			>	gt		${표현식 > 표현식}	${표현식 gt 표현식}
			>=	ge		${표현식 >= 표현식}	${표현식 ge 표현식}
			<	lt
			<=	le
			==	eq		
			!=	ne
		논리연산
			&&	and		${표현식 > 10000 && 표현식 == 'VIP'}
			||	or		${표현식 > 50000 or 표현식 == 5}
			!	not		${not 표현식 == 'VIP'}
		삼항연산
			? :		${표현식 비교연산자 비교값 ? 값1 : 값2}
		기타
			empty
				* true를 반환하는 경우
					값이  null인 경우
					      "" 빈문자열인 경우
					      배열이나 콜렉션의 길이가 0인 경우
					      비어있는 맵인 경우
			사용예)
				${empty 표현식}		표현식에 해당하는 값이 비어있으면 true
				${not empty 표현식}	표현식에 해당하는 값이 비어있지 않으면 true

	- EL의 내장객체
		- EL은 JSP의 요청파라미터, 속성, 스코프, 요청헤더정보, 초기화파라미터 정보에 
		  접근할 수 있도록 해당 값을 제공하는 내장객체를 가지고 있다.
---------------------------------------------------------------------------------------------------
내장객체	사용예				설명
---------------------------------------------------------------------------------------------------
param		${param.파라미터명}		요청파라미터값을 조회할 수 있다.
						request.getParameter("파라미터명")와 동일하다.
---------------------------------------------------------------------------------------------------
paramValues	${paramValues.파라미터명}	요청파라미터값을 조회할 수 있다.
		-> 배열이 획득된다		request.getParameterValues("파라미터명")와 동일한다.
---------------------------------------------------------------------------------------------------
pageScope	${pageScope.속성명}		PageContext에 저장된 속성(값, 객체)을 조회한다.
requestScope	${requestScope.속성명}		HttpServletRequest에 저장된 속성을 조회한다.
sessionScope	${sessionScope.속성명}		HttpSession에 저장된 속성을 조회한다.
applicationScope ${applicationScope.속성명}	ServletContext에 저장된 속성을 조회한다.
 * pageScope, requestScope, sessionScope, applicationScope를 직접 명시해서 속성을 조회하지 말자.
 * EL은 ${속성명}으로 표기하면 page -> request -> session -> application의 순서로 해당 속성명으로
   저장된 값이 있는지를 탐색한다.
 * 결론, 속성을 저장할 때 동일한 이름으로 다른 Scope에 저장하지만 않으면, 조회할 때 Scope를
   앞에 적을 필요가 없다.
---------------------------------------------------------------------------------------------------
initParam	${initParam.초기화파라미터명}	초기화파라미터값을 조회한다.
						<context-param>
							<param-name>파라미터명</param-name>
							<param-value>파라미터값</param-value>
						</context-param>
						web.xml에서 위와 같이 설정된 값을 조회한다.
---------------------------------------------------------------------------------------------------
header		${header.요청헤더명}		요청헤더정보에서 헤더명에 해당하는 값을 조회한다.
---------------------------------------------------------------------------------------------------
cookie		${cookie.쿠키명}		쿠키명에 해당하는 쿠키값을 조회한다.
---------------------------------------------------------------------------------------------------
pageContext 	${pageContext.getter메소드이름}	PageContext의 getXXX()메소드의 실행결과를 조회한다.
						JSP의 기본객체를 제공받을 수 있다.
		${pageContext.request.method}
		${pageContext.request.remoteAddr}
		${pageContext.request.requestURI}
		${pageContext.request.queryString}
		${pageContext.session.id}
---------------------------------------------------------------------------------------------------
